//
//  BlockV AG. Copyright (c) 2018, all rights reserved.
//
//  Licensed under the BlockV SDK License (the "License"); you may not use this file or
//  the BlockV SDK except in compliance with the License accompanying it. Unless
//  required by applicable law or agreed to in writing, the BlockV SDK distributed under
//  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
//  ANY KIND, either express or implied. See the License for the specific language
//  governing permissions and limitations under the License.
//


class UserManager {

    constructor(UserApi, store){
      this.UserApi = UserApi;
      this.store = store;
    }

    /**
     * Allows a user to be registered on the BlockV system.
     * @param  {[STRING]} firstName    Users First Name
     * @param  {[STRING]} lastName     Users Last Name
     * @param  {[STRING]} birthday     Users Birthday, Format : YYYY-MM-DD
     * @param  {[STRING]} language     The user's preferred language. Two letter language code according to ISO 639-1.
     * @param  {[STRING]} password     A password for the user to login with
     * @param  {[ARRAY]} tokens        A list of user tokens to identify the user.
     *                                 At least one token is needed to register a user.
     *                                 [
     *                                  {
     *                                    token : "someone@blockv.org",
     *                                    token_type : "email"
     *                                  }
     *                                 ]
     * @param  {[BOOLEAN]} namePublic   TRUE / FALSE
     * @param  {[BOOLEAN]} avatarPublic TRUE / FALSE
     * @return {[OBJECT]}  Returns a success Object containing users specific information.
     */

    register(firstName,lastName, birthday, language, password, tokens, namePublic, avatarPublic){
      return this.UserApi.register(new RegisterRequest(firstName,lastName, birthday, language, password, tokens, namePublic, avatarPublic));
    }

    /**
     * An Alternate version of the register function, It contains an obect instead of inline parameters
     * @param  {[OBJECT]} registration An Object containing all the information required to register a user.
     * @return {[OBJECT]} returns a success Object containing user specific information
     */
    register(registration){
      return this.UserApi.register(registration);
    }


    /**
     * Allows the user to login to the platform
     * @param  {[STRING]} token     Email / Phone Number of the user
     * @param  {[STRING]} tokenType Description of the token : ie. "phone_number" or "email"
     * @param  {[STRING]} password  The password that the user has set
     * @return {[OBJECT]} returns a object containing the information for the user that has logged in.
     */
    login(token, tokenType, password){
    return  this.UserApi.login(token, tokenType, password);
    }

    /**
     * Login with an Account without registering. A unique login string is generated by the server.
     * @param  {[STRING]} guestId A String generated by the server used to login.
     *                            A Guest account can be made into a registered account by patching
     * @return {[OBJECT]}         A Object that contains specific information about the guest user that was logged in.
     */
    loginGuest(guestId){
      return this.UserApi.loginGuest(guestId);
    }

    /**
     * Logs out the currently logged in user.
     * @return {[Object]} Logout success message
     */
    logout(){
      return this.UserApi.logout();
    }

    /**
     * Gets information about the currently logged in user.
     * @return {[OBJECT]} Contains the users information such as ID, Avatar, Name etc.
     */
    getCurrentUser(){
      return this.UserApi.getCurrentUser();
    }

    /**
     * Returns a list of user tokens
     * @return {[OBJECT]} An Object containing a list of Email Address's and Phone Number's for the user.
     */
    getCurrentUserTokens(){
      return this.UserApi.getUserTokens();
    }

    /**
     * Allows the uploading of a new avatar for the user.
     * @param  {[FormData]} formData Uploads the FormData containing the new avatar for the user
     * @return {[OBJECT]}   An Object containing a upload success message
     */
    uploadAvatar(formData){
      this.UserApi.uploadAvatar(formData);
    }

    /**
     * Allows the user to be edited
     * @param  {[OBJECT]} payload A payload containg the fields to be changed for the user. eg.{"first_name" : "John"}
     * @return {[OBJECT]} returns a user Object containing the users info with the current changed fields.
     */
    updateUser(payload){
      return this.UserApi.updateUser(payload);
    }

    /**
     * Returns the Access Token
     * @return {[OBJECT]} Returns a Object containing the Access Token String.
     */
    getAccessToken(){
      return this.UserApi.getAccessToken();
    }

    /**
     * Automatically Encodes the Asset Provides URI's
     * @param {[STRING]} url The URL that needs to be encoded
     */
    encodeAssetProvider(url){
      return this.UserApi.encodeAssetProvider(url);
    }

    /**
     * Sends a Verification Token to verify the token is valid
     * @param  {[STRING]} token      Phone Number / Email Address
     * @param  {[STRING]} token_type Description of the Token above ie. "phone_number" / "email"
     * @return {[CORRESPONDENCE]}   An Email / SMS will be sent to the token with a verification code.
     */
    sendTokenVerification(token, token_type){
      return this.UserApi.sendTokenVerification(token, token_type);
    }


    getRefreshToken(){
      return this.UserApi.getRefreshToken();
    }

    setRefreshToken(token){
      return this.UserApi.setRefreshToken(token);
    }

    /**
     * Verify a users Token
     * @param  {[OBJECT]} verify An Object containing the token, token_type and the verification code.
     *                           {"token" : "someone@blockv.org", "token_type" : "email", "verify_code" :  "00000" }
     * @return {[OBJECT]}        An Object containing the outcome of the verification of the token.
     */
    verifyUserToken(verify){
      return this.UserApi.verifyUserToken(verify);
    }

    /**
     * Allows additional tokens to be added to the user
     * @param {[OBJECT]} payload An Object containing the tokens that need to be added to the users profile.
     * @return {[OBJECT]}  An Object with the updated user profile.
     */
    addUserToken(payload){
      return this.UserApi.addUserToken(payload);
    }

    /**
     * Removes a Token from the user's profile.
     * @param  {[STRING]} tokenId ID of the token that needs to be deleted
     * @return {[OBJECT]} A Success / Faile object with the outcome of the deletion.
     */
    deleteUserToken(tokenId){
      return this.UserApi.deleteUserToken(tokenId);
    }

    getGuestToken(){
      return this.UserApi.getGuestToken();
    }

    /**
     * Sends a verification token to the token that was supplied... NB! this will remove the current users password.
     * @param {[STRING]} token   The Token that needs to be reset (Phone Number / Email Address)
     * @param {[STRING]} token_type Description of the Token to be reset
     */
    resetPassword(token, token_type){
      return this.UserApi.resetPassword(token, token_type);
    }


    addRedeemable(payload){
      return this.UserApi.addRedeemable(payload);
    }



}

export default UserManager;
